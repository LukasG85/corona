{"version":3,"sources":["hooks/useStates.js","components/Statistics.js","components/CountrySelector.js","components/GetImage.js","App.js","serviceWorker.js","index.js"],"names":["useStats","url","useState","stats","setStats","loading","setLoading","error","setError","useEffect","a","fetch","then","res","json","catch","err","data","fetchData","Stats","useStates","className","Card","Body","Title","Text","confirmed","value","recovered","deaths","CountrySelector","countries","selectedCountry","setSelectedCountry","Form","Label","Control","as","custom","onChange","e","target","defaultValue","Object","entries","map","country","code","key","iso3","GetImage","src","alt","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.475440ce.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport default function useStats(url) {\r\n  const [stats, setStats] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState();\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      setLoading(true);\r\n      setError();\r\n      const data = await fetch(url)\r\n        .then(res => res.json())\r\n        .catch(err => {\r\n          setError(err);\r\n        });\r\n\r\n      setStats(data);\r\n\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [url]);\r\n  return {\r\n    stats,\r\n    loading,\r\n    error\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport useStates from \"../hooks/useStates\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nexport default function Stats({ url }) {\r\n  const { stats, loading, error } = useStates(url);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error...</p>;\r\n\r\n  return (\r\n    <div className=\"row card-container\">\r\n      <div className=\"col-md-4\">\r\n        <Card className=\"card\">\r\n          <Card.Body>\r\n            <Card.Title className=\"card__title\">Confirmed:</Card.Title>\r\n            <Card.Text className=\"card__text\">\r\n              {stats.confirmed ? stats.confirmed.value : \"No data\"}\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n\r\n      <div className=\"col-md-4\">\r\n        <Card className=\"card\">\r\n          <Card.Body>\r\n            <Card.Title className=\"card__title\">Recovered:</Card.Title>\r\n            <Card.Text className=\"card__text rescovered\">\r\n              {stats.recovered ? stats.recovered.value : \"No data\"}\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n      <div className=\"col-md-4\">\r\n        <Card className=\"card\">\r\n          <Card.Body>\r\n            <Card.Title className=\"card__title\">Deaths:</Card.Title>\r\n            <Card.Text className=\"card__text death\">\r\n              {stats.deaths ? stats.deaths.value : \"No data\"}\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport useStates from \"../hooks/useStates\";\r\nimport Statistics from \"./Statistics\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nexport default function CountrySelector() {\r\n  const { stats: countries, loading, error } = useStates(\r\n    \"https://covid19.mathdro.id/api/countries\"\r\n  );\r\n  const [selectedCountry, setSelectedCountry] = useState(\"POL\");\r\n  if (loading) return <p>Loading...</p>;\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error...</p>;\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <Form className=\"form\">\r\n          <Form.Label className=\"label\">Choose a country</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom=\"true\"\r\n            onChange={e => {\r\n              setSelectedCountry(e.target.value);\r\n            }}\r\n            defaultValue={selectedCountry}\r\n          >\r\n            {Object.entries(countries.countries).map(([country, code]) => (\r\n              <option\r\n                // selected={selectedCountry === countries.iso3[code]}\r\n                key={country}\r\n                value={countries.iso3[code]}\r\n              >\r\n                {country}\r\n              </option>\r\n            ))}\r\n          </Form.Control>\r\n        </Form>\r\n        <h2 className=\"currently\">Currently Showing {selectedCountry}</h2>\r\n        <Statistics\r\n          url={`https://covid19.mathdro.id/api/countries/${selectedCountry}`}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst img = `https://covid19.mathdro.id/api/og`;\r\n\r\nexport const GetImage = () => {\r\n  return (\r\n    <div className=\"row\">\r\n      <img className=\"stats-img\" src={img} alt=\"statistic\" />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { createGlobalStyle } from \"styled-components\";\nimport CountrySelector from \"./components/CountrySelector\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { GetImage } from \"./components/GetImage\";\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  }\n`;\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <GlobalStyle />\n      <GetImage />\n      <CountrySelector />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}